// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  title              String
  feature            Boolean              @default(false)
  startAt            DateTime
  endAt              DateTime?
  createAt           DateTime             @default(now())
  updateAt           DateTime             @updatedAt
  FrameworkOnProject FrameworkOnProject[]
  TypeOnProject      TypeOnProject[]
}

model Framework {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  createAt            DateTime              @default(now())
  updateAt            DateTime              @updatedAt
  FrameworkOnProject  FrameworkOnProject[]
  LanguageOnFramework LanguageOnFramework[]
}

model Language {
  id                  Int                   @id @default(autoincrement())
  displayString       String                @unique()
  createAt            DateTime              @default(now())
  updateAt            DateTime              @updatedAt
  LanguageOnFramework LanguageOnFramework[]
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  company    String?
  gender     Boolean      @default(true)
  Comment    Comment[]
  Auth       Auth[]
  RoleOnUser RoleOnUser[]
}

model Comment {
  id               Int       @id @default(autoincrement())
  content          String
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  parrentComment   Comment?  @relation("CommentReplies", fields: [parrentCommentId], references: [id])
  parrentCommentId Int?
  replies          Comment[] @relation("CommentReplies")
  createAt         DateTime  @default(now())
  updateAt         DateTime  @updatedAt
}

model ProjectType {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  TypeOnProject TypeOnProject[]
}

model TypeOnProject {
  type          ProjectType @relation(fields: [projectTypeId], references: [id])
  projectTypeId Int
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     Int

  @@id([projectTypeId, projectId])
}

model LanguageOnFramework {
  Language    Language? @relation(fields: [languageId], references: [id])
  languageId  Int
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int

  @@id([frameworkId, languageId])
}

model FrameworkOnProject {
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int

  @@id([projectId, frameworkId])
}

model Role {
  id         Int          @id @default(autoincrement())
  title      String?      @unique
  roleOnUser RoleOnUser[]
}

model Auth {
  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @id
  username     String  @unique
  hashPassword String
  email        String  @unique
  refreshToken String?
}

model RoleOnUser {
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@id([roleId, userId])
}
